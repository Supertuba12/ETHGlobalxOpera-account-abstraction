/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TestCounter, TestCounterInterface } from "../TestCounter";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "CalledFrom",
    type: "event",
  },
  {
    inputs: [],
    name: "count",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "counters",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "repeat",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    name: "gasWaster",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "justemit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610280806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806306661abd14610051578063278ddd3c1461005b578063a1b4689014610063578063be65ab8c14610076575b600080fd5b6100596100a8565b005b6100596100d5565b610059610071366004610155565b61010a565b6100966100843660046101d1565b60006020819052908152604090205481565b60405190815260200160405180910390f35b336000908152602081905260409020546100c3906001610217565b33600090815260208190526040902055565b6040513381527ffb3b4d6258432a9a3d78dd9bffbcb6cfb1bd94f58da35fd530d08da7d1d058329060200160405180910390a1565b60015b83811161014f57600280549060006101248361022f565b90915550506002546000908152600160205260409020819055806101478161022f565b91505061010d565b50505050565b60008060006040848603121561016a57600080fd5b83359250602084013567ffffffffffffffff8082111561018957600080fd5b818601915086601f83011261019d57600080fd5b8135818111156101ac57600080fd5b8760208285010111156101be57600080fd5b6020830194508093505050509250925092565b6000602082840312156101e357600080fd5b81356001600160a01b03811681146101fa57600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b6000821982111561022a5761022a610201565b500190565b600060001982141561024357610243610201565b506001019056fea2646970667358221220dade79ce4719f2c2c86175451bd8403811b1a0dfbd53e4883ad53911092cb46064736f6c634300080c0033";

export class TestCounter__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestCounter> {
    return super.deploy(overrides || {}) as Promise<TestCounter>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TestCounter {
    return super.attach(address) as TestCounter;
  }
  connect(signer: Signer): TestCounter__factory {
    return super.connect(signer) as TestCounter__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestCounterInterface {
    return new utils.Interface(_abi) as TestCounterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestCounter {
    return new Contract(address, _abi, signerOrProvider) as TestCounter;
  }
}
