/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface EntryPointInterface extends ethers.utils.Interface {
  functions: {
    "addStake(uint32)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "create2factory()": FunctionFragment;
    "depositTo(address)": FunctionFragment;
    "deposits(address)": FunctionFragment;
    "getDepositInfo(address)": FunctionFragment;
    "getRequestId(tuple)": FunctionFragment;
    "getSenderAddress(bytes,uint256)": FunctionFragment;
    "getSenderStorage(address)": FunctionFragment;
    "handleOps(tuple[],address)": FunctionFragment;
    "innerHandleOp(tuple,tuple,bytes)": FunctionFragment;
    "paymasterStake()": FunctionFragment;
    "simulateValidation(tuple)": FunctionFragment;
    "unlockStake()": FunctionFragment;
    "unstakeDelaySec()": FunctionFragment;
    "withdrawStake(address)": FunctionFragment;
    "withdrawTo(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addStake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "create2factory",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "depositTo", values: [string]): string;
  encodeFunctionData(functionFragment: "deposits", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getDepositInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequestId",
    values: [
      {
        sender: string;
        nonce: BigNumberish;
        initCode: BytesLike;
        callData: BytesLike;
        callGas: BigNumberish;
        verificationGas: BigNumberish;
        preVerificationGas: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymaster: string;
        paymasterData: BytesLike;
        signature: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getSenderAddress",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSenderStorage",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "handleOps",
    values: [
      {
        sender: string;
        nonce: BigNumberish;
        initCode: BytesLike;
        callData: BytesLike;
        callGas: BigNumberish;
        verificationGas: BigNumberish;
        preVerificationGas: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymaster: string;
        paymasterData: BytesLike;
        signature: BytesLike;
      }[],
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "innerHandleOp",
    values: [
      {
        sender: string;
        nonce: BigNumberish;
        initCode: BytesLike;
        callData: BytesLike;
        callGas: BigNumberish;
        verificationGas: BigNumberish;
        preVerificationGas: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymaster: string;
        paymasterData: BytesLike;
        signature: BytesLike;
      },
      {
        requestId: BytesLike;
        prefund: BigNumberish;
        paymentMode: BigNumberish;
        contextOffset: BigNumberish;
        preOpGas: BigNumberish;
      },
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "paymasterStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "simulateValidation",
    values: [
      {
        sender: string;
        nonce: BigNumberish;
        initCode: BytesLike;
        callData: BytesLike;
        callGas: BigNumberish;
        verificationGas: BigNumberish;
        preVerificationGas: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymaster: string;
        paymasterData: BytesLike;
        signature: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unstakeDelaySec",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawStake",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTo",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addStake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "create2factory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositTo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposits", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDepositInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequestId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSenderAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSenderStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "handleOps", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "innerHandleOp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "paymasterStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "simulateValidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unstakeDelaySec",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdrawTo", data: BytesLike): Result;

  events: {
    "Deposited(address,uint256)": EventFragment;
    "StakeLocked(address,uint256,uint256)": EventFragment;
    "StakeUnlocked(address,uint256)": EventFragment;
    "StakeWithdrawn(address,address,uint256)": EventFragment;
    "UserOperationEvent(bytes32,address,address,uint256,uint256,uint256,bool)": EventFragment;
    "UserOperationRevertReason(bytes32,address,uint256,bytes)": EventFragment;
    "Withdrawn(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeUnlocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserOperationEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserOperationRevertReason"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
}

export type DepositedEvent = TypedEvent<
  [string, BigNumber] & { account: string; totalDeposit: BigNumber }
>;

export type StakeLockedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    account: string;
    totalStaked: BigNumber;
    withdrawTime: BigNumber;
  }
>;

export type StakeUnlockedEvent = TypedEvent<
  [string, BigNumber] & { account: string; withdrawTime: BigNumber }
>;

export type StakeWithdrawnEvent = TypedEvent<
  [string, string, BigNumber] & {
    account: string;
    withdrawAddress: string;
    amount: BigNumber;
  }
>;

export type UserOperationEventEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber, boolean] & {
    requestId: string;
    sender: string;
    paymaster: string;
    nonce: BigNumber;
    actualGasCost: BigNumber;
    actualGasPrice: BigNumber;
    success: boolean;
  }
>;

export type UserOperationRevertReasonEvent = TypedEvent<
  [string, string, BigNumber, string] & {
    requestId: string;
    sender: string;
    nonce: BigNumber;
    revertReason: string;
  }
>;

export type WithdrawnEvent = TypedEvent<
  [string, string, BigNumber] & {
    account: string;
    withdrawAddress: string;
    amount: BigNumber;
  }
>;

export class EntryPoint extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: EntryPointInterface;

  functions: {
    addStake(
      _unstakeDelaySec: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    create2factory(overrides?: CallOverrides): Promise<[string]>;

    depositTo(
      account: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposits(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, BigNumber, number, BigNumber] & {
        deposit: BigNumber;
        staked: boolean;
        stake: BigNumber;
        unstakeDelaySec: number;
        withdrawTime: BigNumber;
      }
    >;

    getDepositInfo(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, boolean, BigNumber, number, BigNumber] & {
          deposit: BigNumber;
          staked: boolean;
          stake: BigNumber;
          unstakeDelaySec: number;
          withdrawTime: BigNumber;
        }
      ] & {
        info: [BigNumber, boolean, BigNumber, number, BigNumber] & {
          deposit: BigNumber;
          staked: boolean;
          stake: BigNumber;
          unstakeDelaySec: number;
          withdrawTime: BigNumber;
        };
      }
    >;

    getRequestId(
      userOp: {
        sender: string;
        nonce: BigNumberish;
        initCode: BytesLike;
        callData: BytesLike;
        callGas: BigNumberish;
        verificationGas: BigNumberish;
        preVerificationGas: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymaster: string;
        paymasterData: BytesLike;
        signature: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<[string]>;

    getSenderAddress(
      initCode: BytesLike,
      salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getSenderStorage(
      sender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { senderStorageCells: BigNumber[] }>;

    handleOps(
      ops: {
        sender: string;
        nonce: BigNumberish;
        initCode: BytesLike;
        callData: BytesLike;
        callGas: BigNumberish;
        verificationGas: BigNumberish;
        preVerificationGas: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymaster: string;
        paymasterData: BytesLike;
        signature: BytesLike;
      }[],
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    innerHandleOp(
      op: {
        sender: string;
        nonce: BigNumberish;
        initCode: BytesLike;
        callData: BytesLike;
        callGas: BigNumberish;
        verificationGas: BigNumberish;
        preVerificationGas: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymaster: string;
        paymasterData: BytesLike;
        signature: BytesLike;
      },
      opInfo: {
        requestId: BytesLike;
        prefund: BigNumberish;
        paymentMode: BigNumberish;
        contextOffset: BigNumberish;
        preOpGas: BigNumberish;
      },
      context: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paymasterStake(overrides?: CallOverrides): Promise<[BigNumber]>;

    simulateValidation(
      userOp: {
        sender: string;
        nonce: BigNumberish;
        initCode: BytesLike;
        callData: BytesLike;
        callGas: BigNumberish;
        verificationGas: BigNumberish;
        preVerificationGas: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymaster: string;
        paymasterData: BytesLike;
        signature: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unlockStake(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unstakeDelaySec(overrides?: CallOverrides): Promise<[number]>;

    withdrawStake(
      withdrawAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawTo(
      withdrawAddress: string,
      withdrawAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addStake(
    _unstakeDelaySec: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  create2factory(overrides?: CallOverrides): Promise<string>;

  depositTo(
    account: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposits(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, boolean, BigNumber, number, BigNumber] & {
      deposit: BigNumber;
      staked: boolean;
      stake: BigNumber;
      unstakeDelaySec: number;
      withdrawTime: BigNumber;
    }
  >;

  getDepositInfo(
    account: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, boolean, BigNumber, number, BigNumber] & {
      deposit: BigNumber;
      staked: boolean;
      stake: BigNumber;
      unstakeDelaySec: number;
      withdrawTime: BigNumber;
    }
  >;

  getRequestId(
    userOp: {
      sender: string;
      nonce: BigNumberish;
      initCode: BytesLike;
      callData: BytesLike;
      callGas: BigNumberish;
      verificationGas: BigNumberish;
      preVerificationGas: BigNumberish;
      maxFeePerGas: BigNumberish;
      maxPriorityFeePerGas: BigNumberish;
      paymaster: string;
      paymasterData: BytesLike;
      signature: BytesLike;
    },
    overrides?: CallOverrides
  ): Promise<string>;

  getSenderAddress(
    initCode: BytesLike,
    salt: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getSenderStorage(
    sender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  handleOps(
    ops: {
      sender: string;
      nonce: BigNumberish;
      initCode: BytesLike;
      callData: BytesLike;
      callGas: BigNumberish;
      verificationGas: BigNumberish;
      preVerificationGas: BigNumberish;
      maxFeePerGas: BigNumberish;
      maxPriorityFeePerGas: BigNumberish;
      paymaster: string;
      paymasterData: BytesLike;
      signature: BytesLike;
    }[],
    beneficiary: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  innerHandleOp(
    op: {
      sender: string;
      nonce: BigNumberish;
      initCode: BytesLike;
      callData: BytesLike;
      callGas: BigNumberish;
      verificationGas: BigNumberish;
      preVerificationGas: BigNumberish;
      maxFeePerGas: BigNumberish;
      maxPriorityFeePerGas: BigNumberish;
      paymaster: string;
      paymasterData: BytesLike;
      signature: BytesLike;
    },
    opInfo: {
      requestId: BytesLike;
      prefund: BigNumberish;
      paymentMode: BigNumberish;
      contextOffset: BigNumberish;
      preOpGas: BigNumberish;
    },
    context: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paymasterStake(overrides?: CallOverrides): Promise<BigNumber>;

  simulateValidation(
    userOp: {
      sender: string;
      nonce: BigNumberish;
      initCode: BytesLike;
      callData: BytesLike;
      callGas: BigNumberish;
      verificationGas: BigNumberish;
      preVerificationGas: BigNumberish;
      maxFeePerGas: BigNumberish;
      maxPriorityFeePerGas: BigNumberish;
      paymaster: string;
      paymasterData: BytesLike;
      signature: BytesLike;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unlockStake(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unstakeDelaySec(overrides?: CallOverrides): Promise<number>;

  withdrawStake(
    withdrawAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawTo(
    withdrawAddress: string,
    withdrawAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addStake(
      _unstakeDelaySec: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    create2factory(overrides?: CallOverrides): Promise<string>;

    depositTo(account: string, overrides?: CallOverrides): Promise<void>;

    deposits(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, BigNumber, number, BigNumber] & {
        deposit: BigNumber;
        staked: boolean;
        stake: BigNumber;
        unstakeDelaySec: number;
        withdrawTime: BigNumber;
      }
    >;

    getDepositInfo(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, BigNumber, number, BigNumber] & {
        deposit: BigNumber;
        staked: boolean;
        stake: BigNumber;
        unstakeDelaySec: number;
        withdrawTime: BigNumber;
      }
    >;

    getRequestId(
      userOp: {
        sender: string;
        nonce: BigNumberish;
        initCode: BytesLike;
        callData: BytesLike;
        callGas: BigNumberish;
        verificationGas: BigNumberish;
        preVerificationGas: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymaster: string;
        paymasterData: BytesLike;
        signature: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    getSenderAddress(
      initCode: BytesLike,
      salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getSenderStorage(
      sender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    handleOps(
      ops: {
        sender: string;
        nonce: BigNumberish;
        initCode: BytesLike;
        callData: BytesLike;
        callGas: BigNumberish;
        verificationGas: BigNumberish;
        preVerificationGas: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymaster: string;
        paymasterData: BytesLike;
        signature: BytesLike;
      }[],
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<void>;

    innerHandleOp(
      op: {
        sender: string;
        nonce: BigNumberish;
        initCode: BytesLike;
        callData: BytesLike;
        callGas: BigNumberish;
        verificationGas: BigNumberish;
        preVerificationGas: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymaster: string;
        paymasterData: BytesLike;
        signature: BytesLike;
      },
      opInfo: {
        requestId: BytesLike;
        prefund: BigNumberish;
        paymentMode: BigNumberish;
        contextOffset: BigNumberish;
        preOpGas: BigNumberish;
      },
      context: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    paymasterStake(overrides?: CallOverrides): Promise<BigNumber>;

    simulateValidation(
      userOp: {
        sender: string;
        nonce: BigNumberish;
        initCode: BytesLike;
        callData: BytesLike;
        callGas: BigNumberish;
        verificationGas: BigNumberish;
        preVerificationGas: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymaster: string;
        paymasterData: BytesLike;
        signature: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { preOpGas: BigNumber; prefund: BigNumber }
    >;

    unlockStake(overrides?: CallOverrides): Promise<void>;

    unstakeDelaySec(overrides?: CallOverrides): Promise<number>;

    withdrawStake(
      withdrawAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawTo(
      withdrawAddress: string,
      withdrawAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Deposited(address,uint256)"(
      account?: string | null,
      totalDeposit?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { account: string; totalDeposit: BigNumber }
    >;

    Deposited(
      account?: string | null,
      totalDeposit?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { account: string; totalDeposit: BigNumber }
    >;

    "StakeLocked(address,uint256,uint256)"(
      account?: string | null,
      totalStaked?: null,
      withdrawTime?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { account: string; totalStaked: BigNumber; withdrawTime: BigNumber }
    >;

    StakeLocked(
      account?: string | null,
      totalStaked?: null,
      withdrawTime?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { account: string; totalStaked: BigNumber; withdrawTime: BigNumber }
    >;

    "StakeUnlocked(address,uint256)"(
      account?: string | null,
      withdrawTime?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { account: string; withdrawTime: BigNumber }
    >;

    StakeUnlocked(
      account?: string | null,
      withdrawTime?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { account: string; withdrawTime: BigNumber }
    >;

    "StakeWithdrawn(address,address,uint256)"(
      account?: string | null,
      withdrawAddress?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { account: string; withdrawAddress: string; amount: BigNumber }
    >;

    StakeWithdrawn(
      account?: string | null,
      withdrawAddress?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { account: string; withdrawAddress: string; amount: BigNumber }
    >;

    "UserOperationEvent(bytes32,address,address,uint256,uint256,uint256,bool)"(
      requestId?: BytesLike | null,
      sender?: string | null,
      paymaster?: string | null,
      nonce?: null,
      actualGasCost?: null,
      actualGasPrice?: null,
      success?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber, BigNumber, boolean],
      {
        requestId: string;
        sender: string;
        paymaster: string;
        nonce: BigNumber;
        actualGasCost: BigNumber;
        actualGasPrice: BigNumber;
        success: boolean;
      }
    >;

    UserOperationEvent(
      requestId?: BytesLike | null,
      sender?: string | null,
      paymaster?: string | null,
      nonce?: null,
      actualGasCost?: null,
      actualGasPrice?: null,
      success?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber, BigNumber, boolean],
      {
        requestId: string;
        sender: string;
        paymaster: string;
        nonce: BigNumber;
        actualGasCost: BigNumber;
        actualGasPrice: BigNumber;
        success: boolean;
      }
    >;

    "UserOperationRevertReason(bytes32,address,uint256,bytes)"(
      requestId?: BytesLike | null,
      sender?: string | null,
      nonce?: null,
      revertReason?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      {
        requestId: string;
        sender: string;
        nonce: BigNumber;
        revertReason: string;
      }
    >;

    UserOperationRevertReason(
      requestId?: BytesLike | null,
      sender?: string | null,
      nonce?: null,
      revertReason?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      {
        requestId: string;
        sender: string;
        nonce: BigNumber;
        revertReason: string;
      }
    >;

    "Withdrawn(address,address,uint256)"(
      account?: string | null,
      withdrawAddress?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { account: string; withdrawAddress: string; amount: BigNumber }
    >;

    Withdrawn(
      account?: string | null,
      withdrawAddress?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { account: string; withdrawAddress: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    addStake(
      _unstakeDelaySec: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    create2factory(overrides?: CallOverrides): Promise<BigNumber>;

    depositTo(
      account: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposits(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    getDepositInfo(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRequestId(
      userOp: {
        sender: string;
        nonce: BigNumberish;
        initCode: BytesLike;
        callData: BytesLike;
        callGas: BigNumberish;
        verificationGas: BigNumberish;
        preVerificationGas: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymaster: string;
        paymasterData: BytesLike;
        signature: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSenderAddress(
      initCode: BytesLike,
      salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSenderStorage(
      sender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    handleOps(
      ops: {
        sender: string;
        nonce: BigNumberish;
        initCode: BytesLike;
        callData: BytesLike;
        callGas: BigNumberish;
        verificationGas: BigNumberish;
        preVerificationGas: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymaster: string;
        paymasterData: BytesLike;
        signature: BytesLike;
      }[],
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    innerHandleOp(
      op: {
        sender: string;
        nonce: BigNumberish;
        initCode: BytesLike;
        callData: BytesLike;
        callGas: BigNumberish;
        verificationGas: BigNumberish;
        preVerificationGas: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymaster: string;
        paymasterData: BytesLike;
        signature: BytesLike;
      },
      opInfo: {
        requestId: BytesLike;
        prefund: BigNumberish;
        paymentMode: BigNumberish;
        contextOffset: BigNumberish;
        preOpGas: BigNumberish;
      },
      context: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paymasterStake(overrides?: CallOverrides): Promise<BigNumber>;

    simulateValidation(
      userOp: {
        sender: string;
        nonce: BigNumberish;
        initCode: BytesLike;
        callData: BytesLike;
        callGas: BigNumberish;
        verificationGas: BigNumberish;
        preVerificationGas: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymaster: string;
        paymasterData: BytesLike;
        signature: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unlockStake(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unstakeDelaySec(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawStake(
      withdrawAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawTo(
      withdrawAddress: string,
      withdrawAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addStake(
      _unstakeDelaySec: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    create2factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositTo(
      account: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposits(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDepositInfo(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRequestId(
      userOp: {
        sender: string;
        nonce: BigNumberish;
        initCode: BytesLike;
        callData: BytesLike;
        callGas: BigNumberish;
        verificationGas: BigNumberish;
        preVerificationGas: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymaster: string;
        paymasterData: BytesLike;
        signature: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSenderAddress(
      initCode: BytesLike,
      salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSenderStorage(
      sender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    handleOps(
      ops: {
        sender: string;
        nonce: BigNumberish;
        initCode: BytesLike;
        callData: BytesLike;
        callGas: BigNumberish;
        verificationGas: BigNumberish;
        preVerificationGas: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymaster: string;
        paymasterData: BytesLike;
        signature: BytesLike;
      }[],
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    innerHandleOp(
      op: {
        sender: string;
        nonce: BigNumberish;
        initCode: BytesLike;
        callData: BytesLike;
        callGas: BigNumberish;
        verificationGas: BigNumberish;
        preVerificationGas: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymaster: string;
        paymasterData: BytesLike;
        signature: BytesLike;
      },
      opInfo: {
        requestId: BytesLike;
        prefund: BigNumberish;
        paymentMode: BigNumberish;
        contextOffset: BigNumberish;
        preOpGas: BigNumberish;
      },
      context: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paymasterStake(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    simulateValidation(
      userOp: {
        sender: string;
        nonce: BigNumberish;
        initCode: BytesLike;
        callData: BytesLike;
        callGas: BigNumberish;
        verificationGas: BigNumberish;
        preVerificationGas: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymaster: string;
        paymasterData: BytesLike;
        signature: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unlockStake(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unstakeDelaySec(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawStake(
      withdrawAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawTo(
      withdrawAddress: string,
      withdrawAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
